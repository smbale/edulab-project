(function(){var require = function (file, cwd) {
    var resolved = require.resolve(file, cwd || '/');
    var mod = require.modules[resolved];
    if (!mod) throw new Error(
        'Failed to resolve module ' + file + ', tried ' + resolved
    );
    var cached = require.cache[resolved];
    var res = cached? cached.exports : mod();
    return res;
};

require.paths = [];
require.modules = {};
require.cache = {};
require.extensions = [".js",".coffee",".json"];

require._core = {
    'assert': true,
    'events': true,
    'fs': true,
    'path': true,
    'vm': true
};

require.resolve = (function () {
    return function (x, cwd) {
        if (!cwd) cwd = '/';
        
        if (require._core[x]) return x;
        var path = require.modules.path();
        cwd = path.resolve('/', cwd);
        var y = cwd || '/';
        
        if (x.match(/^(?:\.\.?\/|\/)/)) {
            var m = loadAsFileSync(path.resolve(y, x))
                || loadAsDirectorySync(path.resolve(y, x));
            if (m) return m;
        }
        
        var n = loadNodeModulesSync(x, y);
        if (n) return n;
        
        throw new Error("Cannot find module '" + x + "'");
        
        function loadAsFileSync (x) {
            x = path.normalize(x);
            if (require.modules[x]) {
                return x;
            }
            
            for (var i = 0; i < require.extensions.length; i++) {
                var ext = require.extensions[i];
                if (require.modules[x + ext]) return x + ext;
            }
        }
        
        function loadAsDirectorySync (x) {
            x = x.replace(/\/+$/, '');
            var pkgfile = path.normalize(x + '/package.json');
            if (require.modules[pkgfile]) {
                var pkg = require.modules[pkgfile]();
                var b = pkg.browserify;
                if (typeof b === 'object' && b.main) {
                    var m = loadAsFileSync(path.resolve(x, b.main));
                    if (m) return m;
                }
                else if (typeof b === 'string') {
                    var m = loadAsFileSync(path.resolve(x, b));
                    if (m) return m;
                }
                else if (pkg.main) {
                    var m = loadAsFileSync(path.resolve(x, pkg.main));
                    if (m) return m;
                }
            }
            
            return loadAsFileSync(x + '/index');
        }
        
        function loadNodeModulesSync (x, start) {
            var dirs = nodeModulesPathsSync(start);
            for (var i = 0; i < dirs.length; i++) {
                var dir = dirs[i];
                var m = loadAsFileSync(dir + '/' + x);
                if (m) return m;
                var n = loadAsDirectorySync(dir + '/' + x);
                if (n) return n;
            }
            
            var m = loadAsFileSync(x);
            if (m) return m;
        }
        
        function nodeModulesPathsSync (start) {
            var parts;
            if (start === '/') parts = [ '' ];
            else parts = path.normalize(start).split('/');
            
            var dirs = [];
            for (var i = parts.length - 1; i >= 0; i--) {
                if (parts[i] === 'node_modules') continue;
                var dir = parts.slice(0, i + 1).join('/') + '/node_modules';
                dirs.push(dir);
            }
            
            return dirs;
        }
    };
})();

require.alias = function (from, to) {
    var path = require.modules.path();
    var res = null;
    try {
        res = require.resolve(from + '/package.json', '/');
    }
    catch (err) {
        res = require.resolve(from, '/');
    }
    var basedir = path.dirname(res);
    
    var keys = (Object.keys || function (obj) {
        var res = [];
        for (var key in obj) res.push(key);
        return res;
    })(require.modules);
    
    for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        if (key.slice(0, basedir.length + 1) === basedir + '/') {
            var f = key.slice(basedir.length);
            require.modules[to + f] = require.modules[basedir + f];
        }
        else if (key === basedir) {
            require.modules[to] = require.modules[basedir];
        }
    }
};

(function () {
    var process = {};
    var global = typeof window !== 'undefined' ? window : {};
    var definedProcess = false;
    
    require.define = function (filename, fn) {
        if (!definedProcess && require.modules.__browserify_process) {
            process = require.modules.__browserify_process();
            definedProcess = true;
        }
        
        var dirname = require._core[filename]
            ? ''
            : require.modules.path().dirname(filename)
        ;
        
        var require_ = function (file) {
            var requiredModule = require(file, dirname);
            var cached = require.cache[require.resolve(file, dirname)];

            if (cached && cached.parent === null) {
                cached.parent = module_;
            }

            return requiredModule;
        };
        require_.resolve = function (name) {
            return require.resolve(name, dirname);
        };
        require_.modules = require.modules;
        require_.define = require.define;
        require_.cache = require.cache;
        var module_ = {
            id : filename,
            filename: filename,
            exports : {},
            loaded : false,
            parent: null
        };
        
        require.modules[filename] = function () {
            require.cache[filename] = module_;
            fn.call(
                module_.exports,
                require_,
                module_,
                module_.exports,
                dirname,
                filename,
                process,
                global
            );
            module_.loaded = true;
            return module_.exports;
        };
    };
})();


require.define("path",Function(['require','module','exports','__dirname','__filename','process','global'],"function filter (xs, fn) {\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (fn(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length; i >= 0; i--) {\n    var last = parts[i];\n    if (last == '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Regex to split a filename into [*, dir, basename, ext]\n// posix version\nvar splitPathRe = /^(.+\\/(?!$)|\\/)?((?:.+?)?(\\.[^.]*)?)$/;\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\nvar resolvedPath = '',\n    resolvedAbsolute = false;\n\nfor (var i = arguments.length; i >= -1 && !resolvedAbsolute; i--) {\n  var path = (i >= 0)\n      ? arguments[i]\n      : process.cwd();\n\n  // Skip empty and invalid entries\n  if (typeof path !== 'string' || !path) {\n    continue;\n  }\n\n  resolvedPath = path + '/' + resolvedPath;\n  resolvedAbsolute = path.charAt(0) === '/';\n}\n\n// At this point the path should be resolved to a full absolute path, but\n// handle relative paths to be safe (might happen when process.cwd() fails)\n\n// Normalize the path\nresolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\nvar isAbsolute = path.charAt(0) === '/',\n    trailingSlash = path.slice(-1) === '/';\n\n// Normalize the path\npath = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n  \n  return (isAbsolute ? '/' : '') + path;\n};\n\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    return p && typeof p === 'string';\n  }).join('/'));\n};\n\n\nexports.dirname = function(path) {\n  var dir = splitPathRe.exec(path)[1] || '';\n  var isWindows = false;\n  if (!dir) {\n    // No dirname\n    return '.';\n  } else if (dir.length === 1 ||\n      (isWindows && dir.length <= 3 && dir.charAt(1) === ':')) {\n    // It is just a slash or a drive letter with a slash\n    return dir;\n  } else {\n    // It is a full dirname, strip trailing slash\n    return dir.substring(0, dir.length - 1);\n  }\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPathRe.exec(path)[2] || '';\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPathRe.exec(path)[3] || '';\n};\n\n//@ sourceURL=path"
));

require.define("__browserify_process",Function(['require','module','exports','__dirname','__filename','process','global'],"var process = module.exports = {};\n\nprocess.nextTick = (function () {\n    var canSetImmediate = typeof window !== 'undefined'\n        && window.setImmediate;\n    var canPost = typeof window !== 'undefined'\n        && window.postMessage && window.addEventListener\n    ;\n\n    if (canSetImmediate) {\n        return function (f) { return window.setImmediate(f) };\n    }\n\n    if (canPost) {\n        var queue = [];\n        window.addEventListener('message', function (ev) {\n            if (ev.source === window && ev.data === 'browserify-tick') {\n                ev.stopPropagation();\n                if (queue.length > 0) {\n                    var fn = queue.shift();\n                    fn();\n                }\n            }\n        }, true);\n\n        return function nextTick(fn) {\n            queue.push(fn);\n            window.postMessage('browserify-tick', '*');\n        };\n    }\n\n    return function nextTick(fn) {\n        setTimeout(fn, 0);\n    };\n})();\n\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\n\nprocess.binding = function (name) {\n    if (name === 'evals') return (require)('vm')\n    else throw new Error('No such module. (Possibly not yet loaded)')\n};\n\n(function () {\n    var cwd = '/';\n    var path;\n    process.cwd = function () { return cwd };\n    process.chdir = function (dir) {\n        if (!path) path = require('path');\n        cwd = path.resolve(dir, cwd);\n    };\n})();\n\n//@ sourceURL=__browserify_process"
));

require.define("/robot.animation.js",Function(['require','module','exports','__dirname','__filename','process','global'],"/*jshint node:true jquery:true*/\n\"use strict\";\n\nmodule.exports = function(robot) {\n\trobot.RobotAnimation = function() { return this.init.apply(this, arguments); };\n\trobot.RobotAnimation.prototype = {\n\t\tinit: function($robot, $maze, blockSize) {\n\t\t\tthis.$robot = $robot;\n\t\t\tthis.$maze = $maze;\n\t\t\tthis.blockSize = blockSize;\n\n\t\t\tthis.scale = blockSize/64+0.01;\n\t\t\tif (this.blockSize !== 64) {\n\t\t\t\trobot.setCss3(this.$robot[0], 'transform', 'scale(' + this.scale + ')');\n\t\t\t}\n\t\t\t\n\t\t\tthis.rotationFactor = 0.75;\n\t\t\tthis.detectWallLength = 40000;\n\t\t\tthis.animationQueue = [];\n\t\t\tthis.duration = 0.006;\n\t\t\tthis.animateTimeout = null;\n\t\t\tthis.blinkTimeouts = [];\n\t\t\tthis.currentAnimation = null;\n\t\t\tthis.lastNumber = 0;\n\t\t\tthis.animationString = '';\n\t\t\tthis.playing = false;\n\t\t},\n\n\t\tadd: function(anim) {\n\t\t\tif (anim.type === 'movement') {\n\t\t\t\tvar dx = (anim.x2-anim.x)*this.blockSize, dy = (anim.y2-anim.y)*this.blockSize;\n\t\t\t\tanim.length = Math.sqrt(dx*dx + dy*dy);\n\t\t\t\tif (anim.length <= 0) return;\n\t\t\t} else if (anim.type === 'rotation') {\n\t\t\t\tanim.length = Math.abs(anim.angle2-anim.angle);\n\t\t\t\tif (anim.length <= 0) return;\n\t\t\t}\n\t\t\tthis.animationQueue.push(anim);\n\t\t\tthis.addAnimationString(anim);\n\t\t},\n\n\t\tplayAnimation: function(number) {\n\t\t\tthis.playing = true;\n\t\t\tthis.clearTimeout();\n\t\t\tthis.number = number;\n\t\t\tvar animation = this.animationQueue[this.number];\n\t\t\tthis.setInitial(animation);\n\n\t\t\tif (animation.type === 'wall') {\n\t\t\t\tthis.setLight(animation.wall ? 'red' : 'green');\n\t\t\t\tthis.animateTimeout = setTimeout(this.animationEnd.bind(this), this.duration*this.detectWallLength);\n\t\t\t} else if (animation.type === 'delay') {\n\t\t\t\tthis.animateTimeout = setTimeout(this.animationEnd.bind(this), this.duration*animation.length);\n\t\t\t} else {\n\t\t\t\tthis.animateTimeout = setTimeout(this.animationStart.bind(this), 0);\n\t\t\t}\n\t\t},\n\n\t\tplay: function(start, end) {\n\t\t\tif (start >= 0 && this.animationQueue.length > 0) {\n\t\t\t\tif (end > start) {\n\t\t\t\t\tthis.lastNumber = end;\n\t\t\t\t\tthis.playAnimation(start);\n\t\t\t\t} else {\n\t\t\t\t\tthis.playing = false;\n\t\t\t\t\tif (start < this.animationQueue.length) {\n\t\t\t\t\t\tthis.setInitial(this.animationQueue[start]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar animation = this.animationQueue[this.animationQueue.length-1];\n\t\t\t\t\t\tthis.resetRobot();\n\t\t\t\t\t\tthis.setPosition(animation.x2 || animation.x, animation.y2 || animation.y);\n\t\t\t\t\t\tthis.setOrientation(animation.angle2 || animation.angle);\n\t\t\t\t\t\tthis.setLight('default');\n\t\t\t\t\t\tthis.show();\n\t\t\t\t\t}\n\t\t\t\t\tthis.clearTimeout();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.playing = false;\n\t\t\t\tthis.clearTimeout();\n\t\t\t\tthis.resetRobot();\n\t\t\t\tthis.hide();\n\t\t\t}\n\t\t},\n\n\t\tstop: function() {\n\t\t\tthis.clearTimeout();\n\t\t\tthis.resetRobot();\n\t\t\tthis.hide();\n\t\t},\n\n\t\tgetLength: function() {\n\t\t\treturn this.animationQueue.length;\n\t\t},\n\n\t\tremove: function() {\n\t\t\tthis.clearTimeout();\n\t\t\tthis.resetRobot();\n\t\t\tthis.hide();\n\t\t},\n\n\t\tremoveFromAnimNum: function(animNum) {\n\t\t\tthis.clearTimeout();\n\t\t\tthis.animationQueue = this.animationQueue.slice(0, animNum);\n\t\t\tthis.animationString = '';\n\t\t\tfor (var i=0; i<this.animationQueue.length; i++) {\n\t\t\t\tthis.addAnimationString(this.animationQueue[i]);\n\t\t\t}\n\t\t},\n\n\t\t/// INTERNAL FUNCTIONS ///\n\t\taddAnimationString: function(anim) {\n\t\t\tif (anim.goals) {\n\t\t\t\tfor (var i=0; i<anim.goals.length; i++) {\n\t\t\t\t\tthis.animationString += 'G' + anim.goals[i].x + '/' + anim.goals[i].y + '/' + anim.goals[i].amount + ',';\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.animationString += anim.type + ',' + anim.x + ',' + anim.y + ',' + anim.x2 + ',' + anim.y2 + ',' + anim.angle + ',' + anim.angle2 + ',';\n\t\t},\n\n\t\tresetRobot: function() {\n\t\t\trobot.setCss3(this.$robot[0], 'transition', '');\n\t\t\tthis.$robot.off('transitionend webkitTransitionEnd MSTransitionEnd oTransitionEnd');\n\t\t\tthis.$maze.children('.robot-maze-block-goal-blink').removeClass('robot-maze-block-goal-blink');\n\t\t\tfor (var i=0; i<this.blinkTimeouts.length; i++) {\n\t\t\t\tclearTimeout(this.blinkTimeouts[i]);\n\t\t\t}\n\t\t},\n\n\t\tshow: function() {\n\t\t\tthis.$robot[0].style.display = 'block';\n\t\t},\n\n\t\thide: function() {\n\t\t\tthis.$robot[0].style.display = 'none';\n\t\t},\n\n\t\tsetInitial: function(animation) {\n\t\t\tthis.resetRobot();\n\t\t\tthis.setPosition(animation.x, animation.y);\n\t\t\tthis.setOrientation(animation.angle);\n\t\t\tthis.setLight('default');\n\t\t\tthis.show();\n\t\t},\n\n\t\tanimationStart: function() {\n\t\t\tthis.animateTimeout = null;\n\t\t\tvar animation = this.animationQueue[this.number];\n\t\t\tvar duration = (this.duration*animation.length).toFixed(5);\n\t\t\t//this.$robot.on('transitionend webkitTransitionEnd MSTransitionEnd oTransitionEnd', this.animationEnd.bind(this));\n\t\t\tthis.animateTimeout = window.setTimeout(this.animationEnd.bind(this), duration*1000);\n\n\t\t\tif (animation.type === 'movement') {\n\t\t\t\trobot.setCss3(this.$robot[0], 'transition', 'left ' + duration + 's linear, top ' + duration + 's linear');\n\t\t\t\tthis.setPosition(animation.x2, animation.y2);\n\n\t\t\t\tif (animation.goals !== null) {\n\t\t\t\t\tfor (var i=0; i<animation.goals.length; i++) {\n\t\t\t\t\t\tthis.setBlinkAnim(animation.goals[i].$block, animation.goals[i].amount);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (animation.type === 'rotation') {\n\t\t\t\tduration = this.rotationFactor*duration;\n\t\t\t\trobot.setCss3(this.$robot[0], 'transition', 'transform ' + duration + 's linear', true);\n\t\t\t\tthis.setOrientation(animation.angle2);\n\t\t\t}\n\t\t},\n\n\t\tsetBlinkAnim: function($block, amount) {\n\t\t\tthis.blinkTimeouts.push(setTimeout(function() {\n\t\t\t\t$block.addClass('robot-maze-block-goal-blink');\n\t\t\t}, (amount-0.5)*this.blockSize*this.duration*1000));\n\t\t\tthis.blinkTimeouts.push(setTimeout(function() {\n\t\t\t\t$block.removeClass('robot-maze-block-goal-blink');\n\t\t\t}, (amount+0.5)*this.blockSize*this.duration*1000));\n\t\t},\n\n\t\tanimationEnd: function() {\n\t\t\t//this.clearTimeout();\n\t\t\tthis.animateTimeout = null;\n\t\t\tthis.setLight('default');\n\n\t\t\tif (this.number+1 < this.lastNumber && this.number < this.animationQueue.length-1) {\n\t\t\t\tthis.playAnimation(this.number+1);\n\t\t\t} else {\n\t\t\t\tthis.playing = false;\n\t\t\t}\n\t\t},\n\n\t\tsetPosition: function(x, y) {\n\t\t\tthis.$robot.css('left', Math.round(x*this.blockSize + this.blockSize/2));\n\t\t\tthis.$robot.css('top', Math.round(y*this.blockSize + this.blockSize/2));\n\t\t},\n\n\t\tsetOrientation: function(angle) {\n\t\t\trobot.setCss3(this.$robot[0], 'transform', 'rotate(' + Math.round(90-angle) + 'deg)' + (this.blockSize !== 64 ? ' scale(' + this.scale + ')' : ''));\n\t\t},\n\n\t\tsetLight: function(state) {\n\t\t\tthis.$robot.removeClass('robot-green robot-red');\n\t\t\tif (state === 'red') {\n\t\t\t\tthis.$robot.addClass('robot-red');\n\t\t\t} else if (state === 'green') {\n\t\t\t\tthis.$robot.addClass('robot-green');\n\t\t\t}\n\t\t},\n\n\t\tclearTimeout: function() {\n\t\t\tif (this.animateTimeout !== null) {\n\t\t\t\tclearTimeout(this.animateTimeout);\n\t\t\t\tthis.animateTimeout = null;\n\t\t\t}\n\t\t}\n\t};\n};\n//@ sourceURL=/robot.animation.js"
));

require.define("/robot.manager.js",Function(['require','module','exports','__dirname','__filename','process','global'],"/*jshint node:true jquery:true*/\n\"use strict\";\n\nmodule.exports = function(robot) {\n\trobot.RobotAnimationManager = function() { return this.init.apply(this, arguments); };\n\trobot.RobotAnimationManager.prototype = {\n\t\tinit: function($robot, $maze, blockSize) {\n\t\t\tthis.$robot = $robot;\n\t\t\tthis.$robot.hide();\n\t\t\tthis.$maze = $maze;\n\t\t\tthis.blockSize = blockSize;\n\t\t\tthis.runningAnimation = null;\n\t\t\tthis.insertingAnimation = null;\n\t\t\tthis.start = -1;\n\t\t\tthis.end = -1;\n\t\t},\n\n\t\tnewAnimation: function() {\n\t\t\tthis.insertingAnimation = new robot.RobotAnimation(this.$robot, this.$maze, this.blockSize);\n\t\t\treturn this.insertingAnimation;\n\t\t},\n\t\t\n\t\tplay: function(start, end) {\n\t\t\tvar newAnim = this.useNewAnimation();\n\t\t\tif (newAnim || this.start !== start || this.end !== end) {\n\t\t\t\tthis.forcePlay(start, end);\n\t\t\t}\n\t\t},\n\n\t\tforcePlay: function(start, end) {\n\t\t\tthis.useNewAnimation();\n\t\t\tthis.start = start;\n\t\t\tthis.end = end;\n\t\t\tthis.replay();\n\t\t},\n\n\t\treplay: function() {\n\t\t\tif (this.runningAnimation !== null && this.start >= 0 && this.end >= 0) {\n\t\t\t\tthis.runningAnimation.play(this.start, this.end);\n\t\t\t}\n\t\t},\n\n\t\tstop: function() {\n\t\t\tthis.start = -1;\n\t\t\tthis.end = -1;\n\t\t\tif (this.runningAnimation !== null) {\n\t\t\t\tthis.runningAnimation.stop();\n\t\t\t}\n\t\t},\n\n\t\tremove: function() {\n\t\t\tif (this.runningAnimation !== null) {\n\t\t\t\tthis.runningAnimation.remove();\n\t\t\t\tthis.runningAnimation = null;\n\t\t\t}\n\t\t\tif (this.insertingAnimation !== null) {\n\t\t\t\tthis.insertingAnimation.remove();\n\t\t\t\tthis.insertingAnimation = null;\n\t\t\t}\n\t\t},\n\n\t\t/// INTERNAL FUNCTIONS ///\n\t\tuseNewAnimation: function() {\n\t\t\tif (this.insertingAnimation !== null) {\n\t\t\t\tif (this.runningAnimation === null) {\n\t\t\t\t\tthis.runningAnimation = this.insertingAnimation;\n\t\t\t\t\tthis.insertingAnimation = null;\n\t\t\t\t\treturn true;\n\t\t\t\t} else if (this.insertingAnimation.animationString !== this.runningAnimation.animationString) {\n\t\t\t\t\tthis.runningAnimation.remove();\n\t\t\t\t\tthis.runningAnimation = this.insertingAnimation;\n\t\t\t\t\tthis.insertingAnimation = null;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t};\n};\n//@ sourceURL=/robot.manager.js"
));

require.define("/robot.applet.js",Function(['require','module','exports','__dirname','__filename','process','global'],"/*jshint node:true jquery:true*/\n\"use strict\";\n\nmodule.exports = function(robot) {\n\trobot.ProgramApplet = function() { return this.init.apply(this, arguments); };\n\trobot.ProgramApplet.prototype = {\n\t\tinit: function($container, options) {\n\t\t\tthis.applet = new robot.Applet($container, options);\n\n\t\t\tif (options.state) this.applet.setState(options.state);\n\t\t\telse this.applet.initialState(options);\n\t\t\t\n\t\t\tthis.program = function() {};\n\t\t\tthis.applet.setStateChangeCallback(this.run.bind(this));\n\t\t\tthis.run();\n\t\t},\n\n\t\tsetProgram: function(program) {\n\t\t\tthis.program = program;\n\t\t\tthis.run();\n\t\t},\n\n\t\trun: function() {\n\t\t\tvar r = new robot.Robot(this.applet.getState());\n\t\t\tthis.applet.clear();\n\t\t\tthis.program(r);\n\t\t\tr.play(this.applet);\n\t\t}\n\t};\n\n\trobot.Applet = function() { return this.init.apply(this, arguments); };\n\trobot.Applet.prototype = {\n\t\tinit: function($container, options) {\n\t\t\tthis.readOnly = options.readOnly || false;\n\t\t\tthis.blockSize = options.blockSize || 64;\n\n\t\t\tthis.$container = $container;\n\t\t\tthis.$container.on('mouseup', this.containerMouseUp.bind(this));\n\t\t\tthis.$container.on('mouseleave', this.containerMouseLeave.bind(this));\n\t\t\tthis.$container.addClass('robot-container robot-not-highlighting');\n\n\t\t\tthis.$maze = $('<div class=\"robot-maze\"></div>');\n\t\t\tthis.$container.append(this.$maze);\n\n\t\t\tthis.$path = $('<div class=\"robot-path\"></div>');\n\t\t\tthis.$container.append(this.$path);\n\n\t\t\tthis.$robot = $('<div class=\"robot-robot\"></div>');\n\t\t\tthis.$container.append(this.$robot);\n\t\t\tthis.$robot.hide();\n\n\t\t\tthis.$initial = $('<div class=\"robot-robot robot-initial\"></div>');\n\t\t\tthis.$container.append(this.$initial);\n\t\t\tif (this.blockSize !== 64) {\n\t\t\t\trobot.setCss3(this.$initial[0], 'transform', 'scale(' + (this.blockSize/64+0.01) + ')');\n\t\t\t}\n\n\t\t\tif (!this.readOnly) {\n\t\t\t\tthis.$container.addClass('robot-interactive');\n\t\t\t\tthis.$initial.on('mousedown', this.initialMouseDown.bind(this));\n\t\t\t}\n\n\t\t\tthis.animationManager = new robot.RobotAnimationManager(this.$robot, this.$maze, this.blockSize);\n\t\t\tthis.animation = null;\n\t\t},\n\n\t\tremove: function() {\n\t\t\tthis.clear();\n\t\t\tthis.$container.children('.robot-maze-block .robot-maze-line-vertical, .robot-maze-line-horizontal').remove();\n\t\t\tthis.animationManager.remove();\n\t\t\tthis.lastAnim = null;\n\t\t\tthis.$lastElement = null;\n\n\t\t\tthis.$maze.remove();\n\t\t\tthis.$path.remove();\n\t\t\tthis.$robot.remove();\n\t\t\tthis.$container.removeClass('robot-container robot-not-highlighting');\n\t\t},\n\n\t\tclear: function() {\n\t\t\tthis.$path.children('.robot-path-line, .robot-path-point').remove();\n\t\t\tthis.animation = this.animationManager.newAnimation();\n\t\t\tthis.lastAnim = null;\n\t\t\tthis.$lastElement = null;\n\t\t},\n\n\t\tinsertDelay: function(delay) { // only to be called right after creating this object with a state\n\t\t\tthis.lastAnim = {type: 'delay', x: this.state.initialX, y: this.state.initialY, angle: this.state.initialAngle, length: delay};\n\t\t\tthis.animation.add(this.lastAnim);\n\t\t\tthis.$lastElement = null;\n\t\t},\n\n\t\tinsertLine: function(fromX, fromY, toX, toY, angle, goals) {\n\t\t\tvar dy = (toY-fromY)*this.blockSize, dx = (toX-fromX)*this.blockSize;\n\t\t\tvar angleRad = Math.atan2(dy, dx);\n\t\t\tvar length = Math.sqrt(dx*dx+dy*dy);\n\t\t\tvar $line = $('<div class=\"robot-path-line\"><div class=\"robot-path-line-inside\"></div></div>');\n\t\t\t$line[0].style.width = Math.round(length) + 'px';\n\t\t\trobot.setCss3($line[0], 'transform', 'rotate(' + (angleRad*180/Math.PI) + 'deg)');\n\t\t\t$line[0].style.left = Math.round(fromX*this.blockSize + (this.blockSize + dx - length)/2) + 'px';\n\t\t\t$line[0].style.top = Math.round(fromY*this.blockSize + (this.blockSize + dy)/2) + 'px';\n\t\t\tthis.$path.append($line);\n\n\t\t\tif (goals !== null) {\n\t\t\t\tfor (var i=0; i<goals.length; i++) {\n\t\t\t\t\tgoals[i].$block = this.$blocks[goals[i].x][goals[i].y];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.lastAnim = {type: 'movement', x: fromX, y: fromY, x2: toX, y2: toY, angle: angle, goals: goals};\n\t\t\tthis.animation.add(this.lastAnim);\n\n\t\t\tthis.$lastElement = $line;\n\t\t},\n\n\t\tinsertPoint: function(x, y, fromAngle, amount) {\n\t\t\tvar toAngle = fromAngle+amount;\n\t\t\tvar $point = $('<div class=\"robot-path-point\"><div class=\"robot-path-point-inside\"><div class=\"robot-path-point-arrow\"></div></div></div>');\n\t\t\tthis.$path.append($point);\n\n\t\t\tvar toAngleRad = toAngle/180*Math.PI;\n\n\t\t\t// 5 = 0.5*@robot-path-point-arrow-hover\n\t\t\t$point[0].style.left = Math.round(x*this.blockSize + this.blockSize/2 + 5*Math.cos(toAngleRad)) + 'px';\n\t\t\t$point[0].style.top = Math.round(y*this.blockSize + this.blockSize/2 - 5*Math.sin(toAngleRad)) + 'px';\n\t\t\trobot.setCss3($point[0], 'transform', 'rotate(' + (-toAngle) + 'deg)');\n\n\t\t\tthis.lastAnim = {type: 'rotation', x: x, y: y, angle: fromAngle, angle2: toAngle};\n\t\t\tthis.animation.add(this.lastAnim);\n\n\t\t\tthis.$lastElement = $point;\n\t\t},\n\n\t\tinsertDetectWall: function(x, y, angle, wall) {\n\t\t\tthis.lastAnim = {type: 'wall', x: x, y: y, angle: angle, wall: wall};\n\t\t\tthis.animation.add(this.lastAnim);\n\t\t\tthis.$lastElement = null;\n\t\t\treturn wall;\n\t\t},\n\n\t\tremovePathHighlights: function() {\n\t\t\tthis.$path.children('.robot-path-highlight').removeClass('robot-path-highlight');\n\t\t},\n\n\t\tremoveEventHighlights: function() {\n\t\t\tthis.$path.children('.robot-path-highlight-event').removeClass('robot-path-highlight-event');\n\t\t},\n\n\t\tremoveTimeHighlights: function() {\n\t\t\tthis.$path.children('.robot-path-highlight-time').removeClass('robot-path-highlight-time');\n\t\t},\n\n\t\thighlightVisitedGoal: function(goal) {\n\t\t\tthis.$maze.children('.robot-maze-block-goal-blink').removeClass('robot-maze-block-goal-blink');\n\t\t\tif (goal !== null) {\n\t\t\t\tthis.$blocks[goal%this.state.columns][Math.floor(goal/this.state.columns)].addClass('robot-maze-block-goal-blink');\n\t\t\t}\n\t\t},\n\n\t\tdrawInterface: function() {\n\t\t\tvar x, y, $line, $block;\n\n\t\t\tthis.width = this.state.columns * this.blockSize;\n\t\t\tthis.height = this.state.rows * this.blockSize;\n\t\t\tthis.$container.width(this.width);\n\t\t\tthis.$container.height(this.height);\n\n\t\t\t// inits\n\t\t\tthis.$maze.children('.robot-maze-block, .robot-maze-line-vertical, .robot-maze-line-horizontal').remove();\n\t\t\tthis.$verticalLines = [];\n\t\t\tthis.$horizontalLines = [];\n\t\t\tthis.$blocks = [];\n\t\t\tfor (x=0; x<this.state.columns; x++) {\n\t\t\t\tthis.$verticalLines[x] = [];\n\t\t\t\tthis.$horizontalLines[x] = [];\n\t\t\t\tthis.$blocks[x] = [];\n\t\t\t}\n\n\t\t\t// blocks\n\t\t\tfor (x=0; x<this.state.columns; x++) {\n\t\t\t\tfor (y=0; y<this.state.rows; y++) {\n\t\t\t\t\t$block = $('<div class=\"robot-maze-block\"></div>');\n\t\t\t\t\t$block[0].style.left = (x*this.blockSize) + 'px';\n\t\t\t\t\t$block[0].style.top = (y*this.blockSize) + 'px';\n\t\t\t\t\t$block.width(this.blockSize);\n\t\t\t\t\t$block.height(this.blockSize);\n\t\t\t\t\t$block.data('x', x);\n\t\t\t\t\t$block.data('y', y);\n\t\t\t\t\tif (this.state.blockGoal[x][y]) $block.addClass('robot-maze-block-goal');\n\t\t\t\t\tthis.$maze.append($block);\n\t\t\t\t\tthis.$blocks[x][y] = $block;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// vertical lines\n\t\t\tfor (y=0; y<this.state.rows; y++) {\n\t\t\t\tfor (x=1; x<this.state.columns; x++) {\n\t\t\t\t\t$line = $('<div class=\"robot-maze-line-vertical\"><div class=\"robot-maze-line-inside\"></div></div>');\n\t\t\t\t\t$line[0].style.left = (x*this.blockSize) + 'px';\n\t\t\t\t\t$line[0].style.top = (y*this.blockSize) + 'px';\n\t\t\t\t\t$line.height(this.blockSize);\n\t\t\t\t\t$line.data('x', x);\n\t\t\t\t\t$line.data('y', y);\n\t\t\t\t\tif (this.state.verticalActive[x][y]) $line.addClass('robot-maze-line-active');\n\t\t\t\t\tthis.$maze.append($line);\n\t\t\t\t\tthis.$verticalLines[x][y] = $line;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// horizontal lines\n\t\t\tfor (x=0; x<this.state.columns; x++) {\n\t\t\t\tfor (y=1; y<this.state.rows; y++) {\n\t\t\t\t\t$line = $('<div class=\"robot-maze-line-horizontal\"><div class=\"robot-maze-line-inside\"></div></div>');\n\t\t\t\t\t$line[0].style.left = (x*this.blockSize) + 'px';\n\t\t\t\t\t$line[0].style.top = (y*this.blockSize) + 'px';\n\t\t\t\t\t$line.width(this.blockSize);\n\t\t\t\t\t$line.data('x', x);\n\t\t\t\t\t$line.data('y', y);\n\t\t\t\t\tif (this.state.horizontalActive[x][y]) $line.addClass('robot-maze-line-active');\n\t\t\t\t\tthis.$maze.append($line);\n\t\t\t\t\tthis.$horizontalLines[x][y] = {$line: $line, active: false};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!this.readOnly) {\n\t\t\t\t$('.robot-maze-block').click(this.clickBlock.bind(this));\n\t\t\t\t$('.robot-maze-line-vertical').click(this.clickVerticalLine.bind(this));\n\t\t\t\t$('.robot-maze-line-horizontal').click(this.clickHorizontalLine.bind(this));\n\t\t\t}\n\n\t\t\tthis.drawInitial();\n\t\t},\n\n\t\tdrawInitial: function() {\n\t\t\tthis.$initial[0].style.left = (this.state.initialX * this.blockSize + this.blockSize/2) + 'px';\n\t\t\tthis.$initial[0].style.top = (this.state.initialY * this.blockSize + this.blockSize/2) + 'px';\n\t\t},\n\n\t\tforcePlay: function() {\n\t\t\tthis.animationManager.forcePlay(0, Infinity);\n\t\t},\n\n\t\tplay: function() {\n\t\t\tthis.animationManager.play(0, Infinity);\n\t\t},\n\n\t\tstop: function() {\n\t\t\tthis.animationManager.stop();\n\t\t},\n\n\t\tgetState: function() {\n\t\t\treturn JSON.stringify(this.state);\n\t\t},\n\n\t\tsetState: function(state) {\n\t\t\tthis.state = JSON.parse(state);\n\t\t\tthis.drawInterface();\n\t\t\tthis.clear();\n\t\t},\n\n\t\tinitialState: function(options) {\n\t\t\tvar columns = options.columns || 8, rows = options.rows || 8;\n\t\t\tthis.state = {\n\t\t\t\tcolumns: columns,\n\t\t\t\trows: rows,\n\t\t\t\tinitialX: Math.floor(columns/2),\n\t\t\t\tinitialY: rows-1,\n\t\t\t\tinitialAngle: 90,\n\t\t\t\tmazeObjects: 0,\n\t\t\t\tverticalActive: [],\n\t\t\t\thorizontalActive: [],\n\t\t\t\tblockGoal: []\n\t\t\t};\n\t\t\tfor (var x=0; x<columns; x++) {\n\t\t\t\tthis.state.verticalActive[x] = [];\n\t\t\t\tthis.state.horizontalActive[x] = [];\n\t\t\t\tthis.state.blockGoal[x] = [];\n\t\t\t\tfor (var y=0; y<rows; y++) {\n\t\t\t\t\tthis.state.verticalActive[x][y] = false;\n\t\t\t\t\tthis.state.horizontalActive[x][y] = false;\n\t\t\t\t\tthis.state.blockGoal[x][y] = false;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tsetStateChangeCallback: function(callback) {\n\t\t\tthis.stateChangeCallback = callback;\n\t\t},\n\n\t\tclickVerticalLine: function(event) {\n\t\t\tvar $target = $(event.delegateTarget);\n\t\t\tvar active = !this.state.verticalActive[$target.data('x')][$target.data('y')];\n\t\t\tthis.state.verticalActive[$target.data('x')][$target.data('y')] = active;\n\t\t\tif (active) {\n\t\t\t\tthis.state.mazeObjects++;\n\t\t\t\t$target.addClass('robot-maze-line-active');\n\t\t\t} else {\n\t\t\t\tthis.state.mazeObjects--;\n\t\t\t\t$target.removeClass('robot-maze-line-active');\n\t\t\t}\n\t\t\tthis.stateChanged();\n\t\t},\n\n\t\tclickHorizontalLine: function(event) {\n\t\t\tvar $target = $(event.delegateTarget);\n\t\t\tvar active = !this.state.horizontalActive[$target.data('x')][$target.data('y')];\n\t\t\tthis.state.horizontalActive[$target.data('x')][$target.data('y')] = active;\n\t\t\tif (active) {\n\t\t\t\tthis.state.mazeObjects++;\n\t\t\t\t$target.addClass('robot-maze-line-active');\n\t\t\t} else {\n\t\t\t\tthis.state.mazeObjects--;\n\t\t\t\t$target.removeClass('robot-maze-line-active');\n\t\t\t}\n\t\t\tthis.stateChanged();\n\t\t},\n\n\t\tclickBlock: function(event) {\n\t\t\tvar $target = $(event.delegateTarget);\n\t\t\tvar goal = !this.state.blockGoal[$target.data('x')][$target.data('y')];\n\t\t\tthis.state.blockGoal[$target.data('x')][$target.data('y')] = goal;\n\t\t\tif (goal) {\n\t\t\t\tthis.state.mazeObjects++;\n\t\t\t\t$target.addClass('robot-maze-block-goal');\n\t\t\t} else {\n\t\t\t\tthis.state.mazeObjects--;\n\t\t\t\t$target.removeClass('robot-maze-block-goal');\n\t\t\t}\n\t\t\tthis.stateChanged();\n\t\t},\n\n\t\tinitialMouseDown: function(event) {\n\t\t\tvar offset = this.$container.offset();\n\t\t\tif (!this.draggingInitial) {\n\t\t\t\tthis.draggingInitial = true;\n\t\t\t\tthis.dragX = (event.pageX - offset.left)%this.blockSize - this.blockSize/2;\n\t\t\t\tthis.dragY = (event.pageY - offset.top)%this.blockSize - this.blockSize/2;\n\t\t\t\tthis.$container.on('mousemove', this.containerMouseMove.bind(this));\n\t\t\t\tthis.$initial.addClass('robot-initial-dragging');\n\t\t\t\tevent.preventDefault();\n\t\t\t\tthis.drawInitial();\n\t\t\t}\n\t\t},\n\n\t\tcontainerMouseUp: function(event) {\n\t\t\tif (this.draggingInitial) {\n\t\t\t\tthis.$container.off('mousemove');\n\t\t\t\tthis.$initial.removeClass('robot-initial-dragging');\n\t\t\t\tthis.draggingInitial = false;\n\t\t\t\tthis.drawInitial();\n\t\t\t}\n\t\t},\n\n\t\tcontainerMouseLeave: function(event) {\n\t\t\tif (this.draggingInitial) {\n\t\t\t\tthis.$container.off('mousemove');\n\t\t\t\tthis.$initial.removeClass('robot-initial-dragging');\n\t\t\t\tthis.draggingInitial = false;\n\t\t\t\tthis.drawInitial();\n\t\t\t}\n\t\t},\n\n\t\tcontainerMouseMove: function(event) {\n\t\t\tvar offset = this.$container.offset();\n\t\t\tvar x = Math.floor((event.pageX - offset.left)/this.blockSize);\n\t\t\tvar y = Math.floor((event.pageY - offset.top)/this.blockSize);\n\n\t\t\tif (x !== this.state.initialX || y !== this.state.initialY) {\n\t\t\t\tthis.state.initialX = x;\n\t\t\t\tthis.state.initialY = y;\n\t\t\t\tthis.stateChanged();\n\t\t\t}\n\t\t\tthis.$initial[0].style.left = (event.pageX - offset.left - this.dragX) + 'px';\n\t\t\tthis.$initial[0].style.top = (event.pageY - offset.top - this.dragY) + 'px';\n\t\t},\n\n\t\tstateChanged: function() {\n\t\t\tif (this.stateChangeCallback) {\n\t\t\t\tthis.stateChangeCallback(this.getState());\n\t\t\t}\n\t\t}\n\t};\n};\n//@ sourceURL=/robot.applet.js"
));

require.define("/robot.robot.js",Function(['require','module','exports','__dirname','__filename','process','global'],"/*jshint node:true jquery:true*/\n\"use strict\";\n\nmodule.exports = function(robot) {\n\trobot.Robot = function() { return this.init.apply(this, arguments); };\n\trobot.Robot.prototype = {\n\t\tinit: function(state) {\n\t\t\tthis.calls = [];\n\t\t\tthis.state = JSON.parse(state);\n\t\t\tthis.robotX = this.state.initialX;\n\t\t\tthis.robotY = this.state.initialY;\n\t\t\tthis.robotAngle = this.state.initialAngle;\n\t\t\tthis.visitedGoals = [];\n\t\t},\n\n\t\tprimitiveDrive: function(name, args, forward) {\n\t\t\tvar goals = null, fromX = this.robotX, fromY = this.robotY;\n\t\t\ttry {\n\t\t\t\tvar amount = 1;\n\t\t\t\tif (args[0] !== undefined) {\n\t\t\t\t\tamount = args[0];\n\t\t\t\t}\n\t\t\t\tif (!forward) amount = -amount;\n\n\t\t\t\tif (args.length > 1) {\n\t\t\t\t\tthrow '<var>' + name + '</var> accepts no more than <var>1</var> argument';\n\t\t\t\t} else if (typeof amount !== 'number' || !isFinite(amount)) {\n\t\t\t\t\tthrow 'Argument has to be a valid number';\n\t\t\t\t} else if (Math.round(amount) !== amount && this.state.mazeObjects > 0) {\n\t\t\t\t\tthrow 'Fractional amounts are only allowed when the maze is empty';\n\t\t\t\t} else if (amount !== 0) {\n\t\t\t\t\tif (this.state.mazeObjects > 0) {\n\t\t\t\t\t\tvar positive = amount > 0;\n\n\t\t\t\t\t\tfor (var i=0; i<Math.abs(amount); i++) {\n\t\t\t\t\t\t\tif (this.primitiveIsWall(this.robotX, this.robotY, positive ? this.robotAngle : (this.robotAngle + 180)%360)) {\n\t\t\t\t\t\t\t\tthrow 'Robot ran into a wall';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (this.robotAngle === 0) {\n\t\t\t\t\t\t\t\tthis.robotX += (positive ? 1 : -1);\n\t\t\t\t\t\t\t} else if (this.robotAngle === 90) {\n\t\t\t\t\t\t\t\tthis.robotY -= (positive ? 1 : -1);\n\t\t\t\t\t\t\t} else if (this.robotAngle === 180) {\n\t\t\t\t\t\t\t\tthis.robotX -= (positive ? 1 : -1);\n\t\t\t\t\t\t\t} else if (this.robotAngle === 270) {\n\t\t\t\t\t\t\t\tthis.robotY += (positive ? 1 : -1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (this.state.blockGoal[this.robotX][this.robotY]) {\n\t\t\t\t\t\t\t\tvar goal = {x: this.robotX, y: this.robotY, amount: i+1};\n\t\t\t\t\t\t\t\tif (goals === null) {\n\t\t\t\t\t\t\t\t\tgoals = [goal];\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tgoals.push(goal);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (this.visitedGoals.indexOf(this.robotX+this.robotY*this.state.columns) < 0) {\n\t\t\t\t\t\t\t\t\tthis.visitedGoals.push(this.robotX+this.robotY*this.state.columns);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.robotX += Math.cos(this.robotAngle / 180 * Math.PI)*amount;\n\t\t\t\t\t\tthis.robotY -= Math.sin(this.robotAngle / 180 * Math.PI)*amount;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tthis.calls.push({name: 'insertLine', args: [fromX, fromY, this.robotX, this.robotY, this.robotAngle, goals]});\n\t\t\t}\n\t\t},\n\n\t\tprimitiveTurn: function(name, args, clockwise) {\n\t\t\tvar fromAngle = this.robotAngle, amount = 90;\n\t\t\tif (args[0] !== undefined) {\n\t\t\t\tamount = args[0];\n\t\t\t}\n\n\t\t\tif (args.length > 1) {\n\t\t\t\tthrow '<var>' + name + '</var> accepts no more than <var>1</var> argument';\n\t\t\t} else if (typeof amount !== 'number' || !isFinite(amount)) {\n\t\t\t\tthrow 'Argument has to be a valid number';\n\t\t\t} else if ([0, 90, 180, 270].indexOf((amount%360+360)%360) < 0 && this.state.mazeObjects > 0) {\n\t\t\t\tthrow 'Only <var>90</var>, <var>180</var> and <var>270</var> degrees are allowed when the maze is not empty';\n\t\t\t} else {\n\t\t\t\tif (clockwise) amount = -amount;\n\t\t\t\tthis.robotAngle = ((this.robotAngle+amount)%360+360)%360;\n\t\t\t}\n\t\t\tthis.calls.push({name: 'insertPoint', args: [this.robotX, this.robotY, fromAngle, amount]});\n\t\t},\n\n\t\tprimitiveIsWall: function(x, y, angle) {\n\t\t\tif (this.state.mazeObjects <= 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tif (angle === 0) {\n\t\t\t\t\tif (x >= this.state.columns-1 || this.state.verticalActive[x+1][y]) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t} else if (angle === 90) {\n\t\t\t\t\tif (y <= 0 || this.state.horizontalActive[x][y]) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t} else if (angle === 180) {\n\t\t\t\t\tif (x <= 0 || this.state.verticalActive[x][y]) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t} else if (angle === 270) {\n\t\t\t\t\tif (y >= this.state.rows-1 || this.state.horizontalActive[x][y+1]) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\n\t\tprimitiveIsGoal: function(x, y) {\n\t\t\tif (this.state.mazeObjects <= 0) return false;\n\t\t\telse return this.state.blockGoal[x][y];\n\t\t},\n\n\t\tprimitiveDetectWall: function(name, args) {\n\t\t\tvar wall = this.primitiveIsWall(this.robotX, this.robotY, this.robotAngle);\n\t\t\tthis.calls.push({name: 'insertDetectWall', args: [this.robotX, this.robotY, this.robotAngle, wall]});\n\t\t\treturn wall;\n\t\t},\n\n\t\tprimitiveDetectGoal: function(name, args) {\n\t\t\treturn this.primitiveIsGoal(this.robotX, this.robotY);\n\t\t},\n\n\t\tdrive: function() {\n\t\t\treturn this.primitiveDrive('drive', arguments, true);\n\t\t},\n\n\t\tturnLeft: function() {\n\t\t\treturn this.primitiveTurn('turnLeft', arguments, false);\n\t\t},\n\n\t\tturnRight: function() {\n\t\t\treturn this.primitiveTurn('turnRight', arguments, true);\n\t\t},\n\n\t\tdetectWall: function() {\n\t\t\treturn this.primitiveDetectWall('detectWall', arguments);\n\t\t},\n\n\t\tdetectGoal: function() {\n\t\t\treturn this.primitiveDetectGoal('detectGoal', arguments);\n\t\t},\n\n\t\tgetCalls: function() {\n\t\t\treturn this.calls;\n\t\t},\n\n\t\tplay: function(applet) {\n\t\t\tapplet.clear();\n\t\t\tfor (var i=0; i<this.calls.length; i++) {\n\t\t\t\tapplet[this.calls[i].name].apply(applet, this.calls[i].args);\n\t\t\t}\n\t\t\tapplet.play();\n\t\t}\n\t};\n/*\n\toutput.Robot = function() { return this.init.apply(this, arguments); };\n\toutput.Robot.prototype = {\n\t\t/// INTERNAL FUNCTIONS ///\n\t\tinitialState: function(options) {\n\t\t\tvar columns = options.columns || 8, rows = options.rows || 8;\n\t\t\tthis.state = {\n\t\t\t\tcolumns: columns,\n\t\t\t\trows: rows,\n\t\t\t\tinitialX: Math.floor(columns/2),\n\t\t\t\tinitialY: rows-1,\n\t\t\t\tinitialAngle: 90,\n\t\t\t\tmazeObjects: 0,\n\t\t\t\tverticalActive: [],\n\t\t\t\thorizontalActive: [],\n\t\t\t\tblockGoal: []\n\t\t\t};\n\t\t\tfor (var x=0; x<columns; x++) {\n\t\t\t\tthis.state.verticalActive[x] = [];\n\t\t\t\tthis.state.horizontalActive[x] = [];\n\t\t\t\tthis.state.blockGoal[x] = [];\n\t\t\t\tfor (var y=0; y<rows; y++) {\n\t\t\t\t\tthis.state.verticalActive[x][y] = false;\n\t\t\t\t\tthis.state.horizontalActive[x][y] = false;\n\t\t\t\t\tthis.state.blockGoal[x][y] = false;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\taddCall: function(context) {\n\t\t\tif (this.callCounter++ > 300) {\n\t\t\t\tcontext.throwTimeout();\n\t\t\t}\n\t\t\tvar $element = this.robot.$lastElement;\n\t\t\tif ($element !== null) {\n\t\t\t\t$element.data('eventPosition', this.eventPosition);\n\t\t\t\t$element.data('index', this.events[this.eventPosition].calls.length);\n\t\t\t\t$element.on('mousemove', this.pathMouseMove.bind(this));\n\t\t\t\t$element.on('mouseleave', this.pathMouseLeave.bind(this));\n\t\t\t}\n\t\t\tthis.events[this.eventPosition].calls.push({\n\t\t\t\tstepNum: context.getStepNum(),\n\t\t\t\tnodeId: context.getCallNodeId(),\n\t\t\t\tcallId: context.getCallId(),\n\t\t\t\t$element: $element,\n\t\t\t\tanimNum: this.robot.animation.getLength()-1\n\t\t\t});\n\t\t\tthis.events[this.eventPosition].endAnimNum = this.robot.animation.getLength();\n\t\t},\n\n\t\tupdateInterface: function() {\n\t\t\tif (!this.readOnly) {\n\t\t\t\t$('.robot-maze-block').click(this.clickBlock.bind(this));\n\t\t\t\t$('.robot-maze-line-vertical').click(this.clickVerticalLine.bind(this));\n\t\t\t\t$('.robot-maze-line-horizontal').click(this.clickHorizontalLine.bind(this));\n\t\t\t}\n\t\t},\n\n\t\tclickVerticalLine: function(event) {\n\t\t\tvar $target = $(event.delegateTarget);\n\t\t\tvar active = !this.state.verticalActive[$target.data('x')][$target.data('y')];\n\t\t\tthis.state.verticalActive[$target.data('x')][$target.data('y')] = active;\n\t\t\tif (active) {\n\t\t\t\tthis.state.mazeObjects++;\n\t\t\t\t$target.addClass('robot-maze-line-active');\n\t\t\t} else {\n\t\t\t\tthis.state.mazeObjects--;\n\t\t\t\t$target.removeClass('robot-maze-line-active');\n\t\t\t}\n\t\t\tthis.stateChanged();\n\t\t},\n\n\t\tclickHorizontalLine: function(event) {\n\t\t\tvar $target = $(event.delegateTarget);\n\t\t\tvar active = !this.state.horizontalActive[$target.data('x')][$target.data('y')];\n\t\t\tthis.state.horizontalActive[$target.data('x')][$target.data('y')] = active;\n\t\t\tif (active) {\n\t\t\t\tthis.state.mazeObjects++;\n\t\t\t\t$target.addClass('robot-maze-line-active');\n\t\t\t} else {\n\t\t\t\tthis.state.mazeObjects--;\n\t\t\t\t$target.removeClass('robot-maze-line-active');\n\t\t\t}\n\t\t\tthis.stateChanged();\n\t\t},\n\n\t\tpathMouseMove: function(event) {\n\t\t\tif (this.highlighting) {\n\t\t\t\tvar $target = $(event.delegateTarget);\n\t\t\t\tif ($target.data('eventPosition') === this.eventPosition &&\n\t\t\t\t\t\tthis.events[this.eventPosition].calls[$target.data('index')] !== undefined) {\n\t\t\t\t\tif (!$target.hasClass('robot-path-highlight')) {\n\t\t\t\t\t\tthis.robot.removePathHighlights();\n\t\t\t\t\t\t$target.addClass('robot-path-highlight');\n\t\t\t\t\t\tthis.editor.highlightNodeId(this.events[this.eventPosition].calls[$target.data('index')].nodeId);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.robot.removePathHighlights();\n\t\t\t\t\tthis.editor.highlightNodeId(0);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tpathMouseLeave: function(event) {\n\t\t\tif (this.highlighting) {\n\t\t\t\tthis.robot.removePathHighlights();\n\t\t\t\tthis.editor.highlightNodeId(0);\n\t\t\t}\n\t\t},\n\n\t\tinitialMouseDown: function(event) {\n\t\t\tvar offset = this.$container.offset();\n\t\t\tif (!this.draggingInitial) {\n\t\t\t\tthis.draggingInitial = true;\n\t\t\t\tthis.dragX = (event.pageX - offset.left)%blockSize - blockSize/2;\n\t\t\t\tthis.dragY = (event.pageY - offset.top)%blockSize - blockSize/2;\n\t\t\t\tthis.$container.on('mousemove', this.containerMouseMove.bind(this));\n\t\t\t\tthis.robot.$initial.addClass('robot-initial-dragging');\n\t\t\t\tevent.preventDefault();\n\t\t\t\tthis.robot.drawInitial();\n\t\t\t}\n\t\t},\n\n\t\tcontainerMouseUp: function(event) {\n\t\t\tif (this.draggingInitial) {\n\t\t\t\tthis.$container.off('mousemove');\n\t\t\t\tthis.robot.$initial.removeClass('robot-initial-dragging');\n\t\t\t\tthis.draggingInitial = false;\n\t\t\t\tthis.robot.drawInitial();\n\t\t\t}\n\t\t},\n\n\t\tcontainerMouseLeave: function(event) {\n\t\t\tif (this.draggingInitial) {\n\t\t\t\tthis.$container.off('mousemove');\n\t\t\t\tthis.robot.$initial.removeClass('robot-initial-dragging');\n\t\t\t\tthis.draggingInitial = false;\n\t\t\t\tthis.robot.drawInitial();\n\t\t\t}\n\t\t},\n\n\t\tcontainerMouseMove: function(event) {\n\t\t\tvar offset = this.$container.offset();\n\t\t\tvar x = Math.floor((event.pageX - offset.left)/blockSize);\n\t\t\tvar y = Math.floor((event.pageY - offset.top)/blockSize);\n\n\t\t\tif (x !== this.state.initialX || y !== this.state.initialY) {\n\t\t\t\tthis.state.initialX = x;\n\t\t\t\tthis.state.initialY = y;\n\t\t\t\tthis.stateChanged();\n\t\t\t}\n\t\t\tthis.robot.$initial.css('left', event.pageX - offset.left - this.dragX);\n\t\t\tthis.robot.$initial.css('top', event.pageY - offset.top - this.dragY);\n\t\t},\n\n\t\tclickBlock: function(event) {\n\t\t\tvar $target = $(event.delegateTarget);\n\t\t\tvar goal = !this.state.blockGoal[$target.data('x')][$target.data('y')];\n\t\t\tthis.state.blockGoal[$target.data('x')][$target.data('y')] = goal;\n\t\t\tif (goal) {\n\t\t\t\tthis.state.mazeObjects++;\n\t\t\t\t$target.addClass('robot-maze-block-goal');\n\t\t\t} else {\n\t\t\t\tthis.state.mazeObjects--;\n\t\t\t\t$target.removeClass('robot-maze-block-goal');\n\t\t\t}\n\t\t\tthis.stateChanged();\n\t\t},\n\n\t\tstateChanged: function() {\n\t\t\tthis.editor.outputRequestsRerun();\n\t\t\tif (this.stateChangeCallback !== null) {\n\t\t\t\tthis.stateChangeCallback(this.getState());\n\t\t\t}\n\t\t}\n\t};*/\n};\n//@ sourceURL=/robot.robot.js"
));

require.define("/index.js",Function(['require','module','exports','__dirname','__filename','process','global'],"/*jshint node:true*/\n\"use strict\";\n\nvar robot = {};\n\nvar firstUpper = function(value) {\n\treturn value[0].toUpperCase() + value.substring(1);\n};\n\nrobot.setCss3 = function(element, name, value, addBrowserToValue) {\n\taddBrowserToValue = addBrowserToValue || false;\n\tvar browsers = ['', '', 'moz', 'webkit', 'o'];\n\tvar browsersCSS = ['', '-ms-', '-moz-', '-webkit-', '-o-'];\n\tfor (var i=0; i<browsers.length; i++) {\n\t\tvar cssName = browsers[i] + firstUpper(name);\n\n\t\tvar cssValue = value;\n\t\tif (addBrowserToValue && browsersCSS[i])\n\t\t\tcssValue = browsersCSS[i] + value;\n\n\t\telement.style[cssName] = cssValue;\n\t}\n};\n\nrequire('./robot.animation')(robot);\nrequire('./robot.manager')(robot);\nrequire('./robot.applet')(robot);\nrequire('./robot.robot')(robot);\n\nmodule.exports = robot;\n\nwindow.jsdares = window.jsdares || {};\nwindow.jsdares.robot = window.jsdares.robot || robot;\n\n//@ sourceURL=/index.js"
));
require("/index.js");
})();
